
def build_buildconfig(target, source, env):
    outfilepath = str(target[0])
    optionsconfpath = str(source[0])

    ofile = file(outfilepath,"w")
    print >> ofile, "// generated by scons, do not touch"
    print >> ofile, "#pragma once"
    print >> ofile, '#define JACKER_PREFIX "%s"' % str(env.Dir("$prefix"))
    print >> ofile, '#define JACKER_SHARE_DIR "%s"' % str(env.Dir("$prefix/$sharedir/jacker"))
    ofile.close()

env = Environment()
env.PkgConfig('jack', DEB_NAME='libjack-jackd2-dev')

env.Append(
    CPPPATH = [
        '.',
    ],
)

env['BUILDERS'].update(dict(
    BuildConfig = Builder(action = build_buildconfig)
))

env.BuildConfig('jacker_config.hpp', 'build.cfg')

gtk_env = env.Clone()
gtk_env.PkgConfig('gtkmm-2.4', DEB_NAME='libgtkmm-2.4-dev')
gtk_env.PkgConfig('sigc++-2.0', DEB_NAME='libsigc++-2.0-dev')

json_files = [
    'json/json_reader.cpp',
    'json/json_value.cpp',
    'json/json_writer.cpp',
]

objects = env.Object(['jack.cpp',
     'player.cpp',
     'jsong.cpp',
     'model.cpp',
     'drag.cpp',
     ] + json_files)
gtk_objects = gtk_env.Object(['main.cpp',
     'songview.cpp',
     'patternview.cpp',
     'trackview.cpp',
     'measure.cpp'])
jacker = gtk_env.Program('jacker', objects + gtk_objects)

env.Install("$install_bin_dir", jacker)

share_dir = "$install_share_dir/jacker"
env.Install(share_dir, "jacker.glade")
env.Install(share_dir, "jacker.png")
env.Install(share_dir, "cheatsheet.txt")
env.Install(share_dir, "commands.txt")
