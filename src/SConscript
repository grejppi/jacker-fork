Import('*')

def build_buildconfig(target, source, env):
    outfilepath = str(target[0])
    optionsconfpath = str(source[0])

    ofile = file(outfilepath,"w")
    print >> ofile, "// generated by scons, do not touch"
    print >> ofile, "#pragma once"
    print >> ofile, '#define JACKER_PREFIX "%s"' % str(env.Dir("$prefix"))
    print >> ofile, '#define JACKER_SHARE_DIR "%s"' % str(env.Dir("$prefix/$sharedir/jacker"))
    ofile.close()

env = env.Clone()
env.PkgConfig('jack', DEB_NAME='libjack-jackd2-dev')

env.Append(
    CPPPATH = [
        '.',
    ],
)

env['BUILDERS'].update(dict(
    BuildConfig = Builder(action = build_buildconfig)
))

env.BuildConfig('jacker_config.hpp', '#build.cfg')

gtk_env = env.Clone()
gtk_env.PkgConfig('gtkmm-2.4', DEB_NAME='libgtkmm-2.4-dev')
gtk_env.PkgConfig('sigc++-2.0', DEB_NAME='libsigc++-2.0-dev')

json_objects = env.Object(env.Glob('json/*.cpp'))
objects = gtk_env.Object(env.Glob('*.cpp'))
jacker = gtk_env.Program('jacker', json_objects + objects)

Return('jacker')